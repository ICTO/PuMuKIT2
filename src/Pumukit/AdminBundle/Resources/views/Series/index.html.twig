{% extends 'PumukitAdminBundle::layout.html.twig' %}

{% block body %}

<h3 class="cab_body_div"><img src="/legacy/images/admin/cab/serial_ico.png"/> {% trans %}Multimedia Series{% endtrans %}</h3>

<div id="tv_admin_container">
  <div id="tv_admin_bar">
    <div id="preview_series" style="min-height:74px; padding:5px; border: solid 1px #DDD; background: #8eb0bc url(/legacy/images/admin/cab/cab.gif) repeat-x scroll 0% 0%; margin-bottom: 10px">
      {% if(app.session.has('admin/series/id')) %}
        {{ render_hinclude(url('pumukitadmin_series_show', {'id': app.session.get('admin/series/id')})) }}
      {% endif %}
    </div>
    {# TODO define $broadcasts and $seriestypes #}
    {% include 'PumukitAdminBundle:Series:acordeon.html.twig' with {'name': 'series', 'broadcasts': 'broadcasts', 'seriestypes': 'seriestypes'} %}
  </div>

  <div id="tv_admin_content" >
    <div id="list_series" name="list_series" act="/series/list">
    {% include 'PumukitAdminBundle:Series:list.html.twig' %}
    </div>

    <div style="float:right; width:50%">
      <ul class="tv_admin_actions">
        <!-- Falta -->
        <li> {# TODO wizard and path #}
	 <a class="tv_admin_action_next" href="#" onclick="Modalbox.show('/editar.php/wizard/serial',{width:800, title:'{% trans %}STEP I: Serie{% endtrans %}'}); return false;">{% trans %}Wizard{% endtrans %}</a>
        </li>
        <li> {# TODO check route with filter /editar.php/serials/create/filter/filter #}
	 <a title="{% trans %}Create new series{% endtrans %}" class="tv_admin_action_create" href="#" onclick="$('filter_series').reset(); new Ajax.Updater('list_series', '{{ path('pumukitadmin_series_create') }}', {asynchronous:true, evalScripts:true}); return false;">{% trans %}Create{% endtrans %}</a>
        </li>
      </ul>
    </div>

    <select id="options_series" style="margin: 10px 0px; width: 33%" title="{% trans %}Actions on selected items{% endtrans %}" onchange="window.change_select('series', $('options_series'))">
      <option value="default" selected="selected">{% trans %}Select an action...{% endtrans %}</option>
      <option disabled="">---</option>
      <option value="delete_sel">{% trans %}Delete selected{% endtrans %}</option>
      <!-- <option value="inv_announce_sel">{% trans %}Anunciar/Desanunciar selecionados{% endtrans %}</option> -->
      <!-- <option value="inv_working_sel">{% trans %}Ocultar/Desocultar selecionados{% endtrans %}</option> Ocultarlos todos -->
    </select>

  </div>
  <div style="clear:both"></div>
</div>


{# HACK: Cierro div del layout. Para que el formulario de editar series no tenga el margen por defecto de body_div #}
</div>

<!-- div editar -->
<div id="edit_series" class="tv_admin_edit">
  {% if(app.session.has('admin/series/id')) %}
    {{ render(url('pumukitadmin_series_update', {'id': app.session.get('admin/series/id')})) }}
  {% endif %}

  <script type="text/javascript"> {# TODO check all url_for routes #}

function toggle_tree_tag(element, id, mm_id, tag_id) {
  if (element.parentElement.hasClassName("notload")) {
    element.parentElement.removeClassName("notload");
    new Ajax.Updater("tag_ul_children_" + id, url_for('mmtemplates/getchildren') + '/id/' + id + '/block_tag/' + tag_id + '/mm/' + mm_id);
  } else {
    $$(".tag_li_parent_" + id).each(function(e){e.toggleClassName("nodisplay")});
    //element.scrollIntoView();
    $("all_tag_" + tag_id).scrollTop = ((element.positionedOffset()[1]) - 44);
  }
  element.parentElement.toggleClassName("expanded").toggleClassName("collapsed");
}

function toggle_show_all()
{
  // SHOW - Quito el punto a los nodos que muestran sus hijos al desocultar
  $$(".expanded.element, .collapsed.element").each(function(e){
    e.removeClassName("element");
  });

  // SHOW & HIDE - Oculto/Muestro elementos finales que no tiene objetos multimedia
  $$(".nomm.element").each(function(e){
    e.toggleClassName("nodisplayall");
  });

  // SHOW & HIDE - Oculto/Muestro elementos todos sus hijos son finales sin objetos multimedia
  $$(".nomm.expanded, .nomm.collapsed").each(function(e){
    if (e.getElementsBySelector("li.nomm").length == e.getElementsBySelector("li").length) {
      e.toggleClassName("nodisplayall");
    }
  });

  // HIDE - Pongo el punto a los nodos que se quedan sin hijos al ocultar
  $$(".nomm").each(function(e){
    p = e.parentElement.parentElement;
    if (p.getElementsBySelector("li.nodisplayall").length == p.getElementsBySelector("li").length) {
      p.addClassName("element");
    }
  });

}

function create_li_in_select(tag, block_tag_id, mm_id) {
  var $ul = $("select_ul_tag_" + block_tag_id);
  var li = new Element("li", {"id": "select_li_" + tag.id, "class": "element"});
  var span1 = new Element("span", {"class": "icon"}).update("&nbsp;");
  var span2 = new Element("span", {"onclick":"$$(\'.clicked_tag_left\').invoke(\'removeClassName\', \'clicked_tag_left\'); this.addClassName(\'clicked_tag_left\');", "ondblclick": "del_tree_tag(" + tag.id +", "+ mm_id + ")"}).update(tag.cod+ " - " + tag.name);
  li.insert(span1).insert(span2);
  //Add quit logica.
  $ul.insert(li);
}

function add_tree_tag(tag_id, mm_id, block_tag_id) {
  new Ajax.Request(url_for('mmtemplates/addCategory') + '/id/' + mm_id,  {
    method: "post",
    parameters: "tag=" + tag_id,
    asynchronous: true,
    evalScripts: true,
    onSuccess: function(response){
        for (var i=0; i<response.responseJSON.added.length; i++) {
            var c = response.responseJSON.added[i];
            if (c.group.length!=0 && c.group[1]!=undefined) {
               create_li_in_select(c, c.group[1], mm_id);
            }
        }
    }
  });
}


function del_tree_tag(tag_id, mm_id) {
  // TODO Si ya lo tiene no hacer nada.
  console.log("del_tree_tag info_num_mm_" + tag_id);

  new Ajax.Request(url_for('mmtemplates/delCategory') + '/id/' + mm_id,  {
    method: "post",
    parameters: "tag=" + tag_id,
    asynchronous: true,
    evalScripts: true,
    onSuccess: function(response){
        for (var i=0; i<response.responseJSON.deleted.length; i++) {
            var c = response.responseJSON.deleted[i];
            var $_element = $("select_li_" + c.id);
            if ($_element)  $_element.remove();
        }
    }
  });
}

window.update_preview = function(id) {
  var route = '{{ path('pumukitadmin_series_show', {'id': 'PLACEHOLDER'}) }}';
  route.replace('PLACEHOLDER', id);
  new Ajax.Updater("preview_series", route, {asynchronous:true, evalScripts:true});
}

window.delete_seriespic = function(id) {
    if (window.confirm('{% trans %}Are you sure you want to delete this picture?{% endtrans %}')) {
        var url = '{{ path('pumukitadmin_seriespic_delete', {'id': '___id___'}) }}';
        new Ajax.Updater('pic_series', url.replace('___id___', id), {method: 'POST', parameters: {'_method': 'DELETE'}, asynchronous:true, evalScripts:true});
    }
}

window.up_seriespic = function(id) {
    var url = '{{ path('pumukitadmin_seriespic_up', {'id': '___id___'}) }}';
    new Ajax.Updater('pic_series', url.replace('___id___', id), {method: 'POST', asynchronous:true, evalScripts:true});
}

window.down_seriespic = function(id) {
    var url = '{{ path('pumukitadmin_seriespic_down', {'id': '___id___'}) }}';
    new Ajax.Updater('pic_series', url.replace('___id___', id), {method: 'POST', asynchronous:true, evalScripts:true});
}

window.submit_delete_person = function(id, roleId, mmId, hName, template)
{
    if (window.confirm("{% trans %}Are you sure you want to delete the relation of{% endtrans %} "+hName+"?")){
        if ('_template' === template){
            var tag_id = roleId+'_person_mms'+template;
        }else{
            var tag_id = roleId+'_person_mms';
        }
        var url = "{{ path('pumukitadmin_person_delete_relation', {'id': '__id__', 'roleId': '__roleId__','mmId': '__mmId__'}) }}";
        url = url.replace('__id__', id);
        url = url.replace('__roleId__', roleId);
        url = url.replace('__mmId__', mmId);
        new Ajax.Updater(tag_id, url, {asynchronous:true, evalScripts:true, method:'POST', parameters: {'_method': 'DELETE'}});
    }
}

</script>
{% endblock %}
